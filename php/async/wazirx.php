<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;

class wazirx extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'wazirx',
            'name' => 'WazirX',
            'countries' => ['IN'],
            'version' => 'v2',
            'has' => array(
                'CORS' => true,
                'publicAPI' => true,
                'privateAPI' => false,
                'fetchMarkets' => true,
                'fetchCurrencies' => true,
                'fetchTickers' => true,
                'fetchTicker' => false,
                'fetchStatus' => false,
                'fetchOHLCV' => false,
                'fetchOrderBook' => true,
                'fetchTrades' => true,
            ),
            'urls' => array(
                'logo' => 'https://i0.wp.com/blog.wazirx.com/wp-content/uploads/2020/06/banner.png',
                'api' => 'https://api.wazirx.com',
                'www' => 'https://wazirx.com',
                'doc' => 'https://github.com/WazirX/wazirx-api',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'market-status',
                        'tickers',
                        'depth',
                        'trades',
                    ),
                ),
            ),
            'exceptions' => array(
                'exact' => array(
                    '403' => 'ab',
                ),
            ),
            'options' => array(
                'cachedMarketData' => array(),
            ),
        ));
    }

    public function fetch_market_and_assets() {
        $markets = $this->safe_value($this->options['cachedMarketData'], 'markets');
        $assets = $this->safe_value($this->options['cachedMarketData'], 'assets');
        if ($markets !== null && $assets !== null) {
            return $this->options['cachedMarketData'];
        }
        $response = yield $this->publicGetMarketStatus ();
        $this->options['cachedMarketData'] = $response;
        return $response;
    }

    public function fetch_markets($params = array ()) {
        $marketAndAssets = yield $this->fetch_market_and_assets();
        $markets = $marketAndAssets['markets'];
        //      {
        //             "baseMarket" => "btc",
        //             "quoteMarket" => "inr",
        //             "minBuyAmount" => 0.001,
        //             "minSellAmount" => 0.001,
        //             "fee" => array(
        //                 "bid" => array(
        //                     "maker" => 0.001,
        //                     "taker" => 0.0025
        //                 ),
        //                 "ask" => array(
        //                     "maker" => 0.001,
        //                     "taker" => 0.0025
        //                 }
        //             ),
        //             "basePrecision" => 4,
        //             "quotePrecision" => 2,
        //             "low" => "460001.01",
        //             "high" => "505000.0",
        //             "last" => "480102.0",
        //             "open" => 505002,
        //             "volume" => "0.2071",
        //             "sell" => "490000.0",
        //             "buy" => "485001.0",
        //             "type" => "SPOT"
        //             "Status" => "active"
        //       ),
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $baseId = $this->safe_string($market, 'baseMarket');
            $quoteId = $this->safe_string($market, 'quoteMarket');
            $id = null;
            if ($baseId !== null && $quoteId !== null) {
                $id = $baseId . $quoteId;
            }
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = null;
            if ($base !== null && $quote !== null) {
                $symbol = $base . '/' . $quote;
            }
            $status = $this->safe_value($market, 'status') === 'active' ? true : false;
            $makerAndTakerFee = $this->compute_maker_and_taker_fee($market);
            $minBuyAmount = $this->safe_float($market, 'minBuyAmount');
            $minSellAmount = $this->safe_float($market, 'minSellAmount');
            $minAmount = $minBuyAmount > $minSellAmount ? $minSellAmount : $minBuyAmount;
            $precision = array(
                'amount' => $this->safe_integer($market, 'quotePrecision'),
            );
            $limits = array(
                'amount' => array(
                    'min' => $minAmount,
                ),
            );
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => $status,
                'taker' => $makerAndTakerFee['taker'],
                'maker' => $makerAndTakerFee['maker'],
                'percentage' => true,
                'tierBased' => false,
                'precision' => $precision,
                'limits' => $limits,
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies($params = array ()) {
        $marketAndAssets = yield $this->fetch_market_and_assets();
        $assets = $marketAndAssets['assets'];
        //
        //        array(
        //             "type" => "inr",
        //             "name" => "Rupee",
        //             "withdrawFee" => 0,
        //             "minWithdrawAmount" => 50,
        //             "maxWithdrawAmount" => 50000,
        //             "minDepositAmount" => 500,
        //             "confirmation" => 5,
        //             "deposit" => "enabled",
        //             "withdrawal" => "enabled"
        //       ),
        //
        $result = array();
        for ($i = 0; $i < count($assets); $i++) {
            $currency = $assets[$i];
            $id = $this->safe_string($currency, 'type');
            $code = $this->safe_currency_code($id);
            $name = $this->safe_string($currency, 'name');
            $fee = $this->safe_float($currency, 'withdrawFee');
            $minWithdrawAmount = $this->safe_float($currency, 'minWithdrawAmount');
            $maxWithdrawAmount = $this->safe_float($currency, 'maxWithdrawAmount');
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'name' => $name,
                'active' => true,
                'fee' => $fee,
                'info' => $currency,
                'limits' => array(
                    'withdraw' => array( 'min' => $minWithdrawAmount, 'max' => $maxWithdrawAmount ),
                    'amount' => array( 'min' => null, 'max' => null ),
                    'price' => array( 'min' => null, 'max' => null ),
                    'cost' => array( 'min' => null, 'max' => null ),
                ),
            );
        }
        return $result;
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $tickers = yield $this->publicGetTickers ();
        // {
        //     "btcinr" => array(
        //         "base_unit" => "btc",
        //         "quote_unit" => "inr",
        //         "low" => "472005.0",
        //         "high" => "508102.0",
        //         "last" => "508100.0",
        //         "open" => 490000,
        //         "volume" => "0.2709",
        //         "sell" => "508100.0",
        //         "buy" => "481000.0",
        //         "name" => "BTC/INR",
        //         "at" => 1536732262
        //     ),
        //     ...
        // }
        //
        $tickerIds = is_array($tickers) ? array_keys($tickers) : array();
        $result = array();
        for ($i = 0; $i < count($tickerIds); $i++) {
            $ticker = $tickers[$tickerIds[$i]];
            $low = $this->safe_float($ticker, 'low');
            $high = $this->safe_float($ticker, 'high');
            $last = $this->safe_float($ticker, 'last');
            $open = $this->safe_float($ticker, 'open');
            $volume = $this->safe_float($ticker, 'volume');
            $ask = $this->safe_float($ticker, 'sell');
            $bid = $this->safe_float($ticker, 'buy');
            $timestamp = $this->safe_timestamp($ticker, 'at');
            $change = null;
            $average = null;
            $percentage = null;
            if ($last !== null && $open !== null) {
                $change = $last - $open;
                $average = $this->sum($last, $open) / 2;
            }
            if ($change !== null && $open) {
                $percentage = ($change / $open) * 100;
            }
            $symbol = null;
            $name = $this->safe_string($ticker, 'name');
            if ($name !== null) {
                if (is_array($this->markets_by_id) && array_key_exists($name, $this->markets_by_id)) {
                    $market = $this->markets_by_id[$name];
                    $symbol = $market['symbol'];
                } else {
                    [$baseId, $quoteId] = explode('/', $name);
                    $base = $this->safe_currency_code($baseId);
                    $quote = $this->safe_currency_code($quoteId);
                    $symbol = $base . '/' . $quote;
                }
            } else {
                $baseId = $this->safe_string($ticker, 'base_unit');
                $quoteId = $this->safe_string($ticker, 'quote_unit');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
            }
            $result[$symbol] = array(
                'symbol' => $symbol,
                'info' => $ticker,
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
                'high' => $high,
                'low' => $low,
                'bid' => $bid,
                'bidVolume' => null,
                'ask' => $ask,
                'askVolume' => null,
                'vwap' => null,
                'open' => $open,
                'close' => $last,
                'last' => $last,
                'previousClose' => null,
                'change' => $change,
                'percentage' => $percentage,
                'average' => $average,
                'baseVolume' => $volume,
                'quoteVolume' => null,
            );
        }
        return $result;
    }

    public function fetch_order_book($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => null,
        );
        if ($market !== null && $this->safe_string($market, 'id') !== null) {
            $request = array(
                'market' => $market['id'],
            );
        }
        $response = yield $this->publicGetDepth (array_merge($request, $params));
        //
        //     {
        //          "timestamp":1559561187,
        //          "asks":[
        //                     ["8540.0","1.5"],
        //                     ["8541.0","0.0042"]
        //                 ],
        //          "bids":[
        //                     ["8530.0","0.8814"],
        //                     ["8524.0","1.4"]
        //                 ]
        //      }
        //
        $timestamp = $this->safe_timestamp($response, 'timestamp');
        return $this->parse_order_book($response, $timestamp);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => null,
        );
        if ($market !== null && $this->safe_string($market, 'id') !== null) {
            $request = array(
                'market' => $market['id'],
            );
        }
        $response = yield $this->publicGetTrades (array_merge($request, $params));
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        // array(
        //     {
        //         "id" => 1302646,
        //         "price" => "8530.0",
        //         "volume" => "0.3207",
        //         "funds" => "2735.571",
        //         "market" => "btcusdt",
        //         "created_at" => "2019-06-03T17:03:41+05:30",
        //         "side" => null
        //     }
        // )
        $id = $this->safe_string($trade, 'id');
        $timestamp = $this->parse8601($this->safe_string($trade, 'created_at'));
        $datetime = $this->iso8601($timestamp);
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $side = $this->safe_string($trade, 'side');
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'volume');
        $cost = $this->safe_float($trade, 'funds');
        return array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'symbol' => $symbol,
            'order' => $id,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => array(
                'cost' => null,
                'currency' => null,
            ),
        );
    }

    public function compute_maker_and_taker_fee($market) {
        $fee = $this->safe_value($market, 'fee');
        if ($fee === null) {
            return array(
                'maker' => 0,
                'taker' => 0,
            );
        }
        $bidMakerFee = 0;
        $askMakerFee = 0;
        $bidTakerFee = 0;
        $askTakerFee = 0;
        $bid = $this->safe_value($fee, 'bid');
        if ($bid !== null && $bid !== 0) {
            $bidMakerFee = $this->safe_float($bid, 'maker');
            if ($bidMakerFee === null) {
                $bidMakerFee = 0;
            }
            $bidTakerFee = $this->safe_float($bid, 'taker');
            if ($bidTakerFee === null) {
                $bidTakerFee = 0;
            }
        }
        $ask = $this->safe_value($fee, 'ask');
        if ($ask !== null && $ask !== 0) {
            $askMakerFee = $this->safe_float($ask, 'maker');
            if ($askMakerFee === null) {
                $askMakerFee = 0;
            }
            $askTakerFee = $this->safe_float($ask, 'taker');
            if ($askTakerFee === null) {
                $askTakerFee = 0;
            }
        }
        return array(
            'maker' => $bidMakerFee * 0.5 . $askMakerFee * 0.5,
            'taker' => $bidTakerFee * 0.5 . $askTakerFee * 0.5,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'] . '/api' . '/' . $this->version . '/' . $path;
        if ($params) {
            $url .= '?' . $this->urlencode($params);
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($statusCode, $statusText, $url, $method, $responseHeaders, $responseBody, $response, $requestHeaders, $requestBody) {
        if ($statusCode !== 200) {
            $feedback = $this->id . ' ' . $responseBody;
            throw new ExchangeError($feedback);
        }
    }
}
